.gallery {
  background-color: $color-grey-light-1;
  grid-column: full-start / full-end;
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  // 5% of the viewport width
  // We could have done this in different way:- presetting the height of row of the gallery container then use fr unit. Equally divide the height of container by number of rows. ignore if u cant' understand.
  grid-template-rows: repeat(7, 5vw);
  grid-gap: 1.5rem;
  //Shorthand:- grid-template: rows / columns;

  // Make it feel like gutter(gap) is also outside the grid.
  padding: 1.5rem;

  &__item {
    &--1 {
      grid-row: 1 / 3;
      grid-column: 1 / 3;
    }
    &--2 {
      grid-row: 1 / span 3;
      grid-column: 3 / span 3;
    }
    &--3 {
      grid-row: 1 / span 2;
      grid-column: 6 / 7;
    }
    &--4 {
      grid-row: 1 / span 2;
      grid-column: 7 / -1;
    }
    &--5 {
      grid-row: 3 / span 3;
      grid-column: 1 / span 2;
    }
    &--6 {
      grid-row: 4 / span 2;
      grid-column: 3 / span 2;
    }
    &--7 {
      grid-row: 4 / 5;
      grid-column: 5 / 6;
    }
    &--8 {
      grid-row: 3 / span 2;
      grid-column: 6 / span 2;
    }
    &--9 {
      grid-row: 3 / span 3;
      grid-column: 8 / -1;
    }
    &--10 {
      grid-row: 6 / span 2;
      grid-column: 1 / 2;
    }

    &--11 {
      grid-row: 6 / span 2;
      grid-column: 2 / span 2;
    }
    &--12 {
      grid-row: 6 / span 2;
      grid-column: 4 / 5;
    }
    &--13 {
      grid-row: 5 / span 3;
      grid-column: 5 / span 3;
    }
    &--14 {
      grid-row: 6 / span 2;
      grid-column: 8/-1;
    }
  }

  &__img {
    width: 100%;
    height: 100%;
    // For this to work (object-fit) u need to define both height and width.
    object-fit: cover;
    display: block;
  }
}

// aspect-ratio: ;
// Images have intrinsic aspect ratio so they dont fill the grid cell they are assigned to.
